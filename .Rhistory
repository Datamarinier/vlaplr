message(green("✓ Scrubbing away all html-tags "))
raw_text %>%
mutate(sprekertekst = gsub("\r", "", sprekertekst)) %>%
mutate(sprekertekst = gsub("\n", "", sprekertekst)) -> raw_text
for(i in seq_along(raw_text$sprekertekst)){
raw_text$sprekertekst[[i]] <- xml_text(read_html(charToRaw(raw_text$sprekertekst[[i]])))
}
raw_text %>%
filter(stringr::str_detect(sprekertekst, !!!search_term)) -> result
}#end of function
search_terms(procedure_object = procedure_object,
search_terms =  c("corona","covid19","Welzijn"),
type = c("all"),
use_parallel=TRUE
)
search_term
!!search_term)
!!search_term
search_terms <- function(procedure_object,search_terms,type="all",use_parallel=FALSE ){
if( all(!c("id_plenaire_sessie","journaallijn_id","type_activiteit","item_id") %in% names(procedure_object)) ){
stop("Not a valid procedure object!")
}
if(any(!type %in% c("all", "debatten","gedachtenwisselingen","vragen_interpelaties","parlementaire_initiatieven" ) ) ){
stop("Not a valid type. Valid options are: all, debatten, gedachtenwisselingen, vragen_interpelaties, parlementaire_initiatieven. Selecting multiple types is possible." )
}
if(!"all" %in% type){
procedure_object %>%
filter(type_activiteit %in% !!type) -> selection
}else{
selection <- procedure_object
}
mainlist <- call_api_multiple_times(iterator=selection$journaallijn_id,
URL = "http://ws.vlpar.be/e/opendata/",
path = "jln",
query =  list(),
resultVector = c("spreker"),
use_parallel=use_parallel)
message(green("✓ Size of text object = ", format(object.size(mainlist), units = "MB", digits = 1L)))
mainlist %>%
map_dfr(~ .x %>% as_tibble(), .id = "journaallijn_id") %>%
select(journaallijn_id,sprekertekst,sprekertitel) -> raw_text
message(green("✓ Scrubbing away all html-tags "))
raw_text %>%
mutate(sprekertekst = gsub("\r", "", sprekertekst)) %>%
mutate(sprekertekst = gsub("\n", "", sprekertekst)) -> raw_text
for(i in seq_along(raw_text$sprekertekst)){
raw_text$sprekertekst[[i]] <- xml_text(read_html(charToRaw(raw_text$sprekertekst[[i]])))
}
raw_text %>%
filter(stringr::str_detect(sprekertekst, !!search_term)) -> result
}#end of function
search_terms(procedure_object = procedure_object,
search_terms =  c("corona","covid19","Welzijn"),
type = c("all"),
use_parallel=TRUE
)
search_term
raw_text
raw_text %>%
filter(stringr::str_detect(sprekertekst, c(!!search_term)))
search_terms <- function(procedure_object,search_terms,type="all",use_parallel=FALSE ){
if( all(!c("id_plenaire_sessie","journaallijn_id","type_activiteit","item_id") %in% names(procedure_object)) ){
stop("Not a valid procedure object!")
}
if(any(!type %in% c("all", "debatten","gedachtenwisselingen","vragen_interpelaties","parlementaire_initiatieven" ) ) ){
stop("Not a valid type. Valid options are: all, debatten, gedachtenwisselingen, vragen_interpelaties, parlementaire_initiatieven. Selecting multiple types is possible." )
}
if(!"all" %in% type){
procedure_object %>%
filter(type_activiteit %in% !!type) -> selection
}else{
selection <- procedure_object
}
mainlist <- call_api_multiple_times(iterator=selection$journaallijn_id,
URL = "http://ws.vlpar.be/e/opendata/",
path = "jln",
query =  list(),
resultVector = c("spreker"),
use_parallel=use_parallel)
message(green("✓ Size of text object = ", format(object.size(mainlist), units = "MB", digits = 1L)))
mainlist %>%
map_dfr(~ .x %>% as_tibble(), .id = "journaallijn_id") %>%
select(journaallijn_id,sprekertekst,sprekertitel) -> raw_text
message(green("✓ Scrubbing away all html-tags "))
raw_text %>%
mutate(sprekertekst = gsub("\r", "", sprekertekst)) %>%
mutate(sprekertekst = gsub("\n", "", sprekertekst)) -> raw_text
for(i in seq_along(raw_text$sprekertekst)){
raw_text$sprekertekst[[i]] <- xml_text(read_html(charToRaw(raw_text$sprekertekst[[i]])))
}
raw_text %>%
filter(stringr::str_detect(sprekertekst, c(!!search_term))) -> result
}#end of function
search_terms(procedure_object = procedure_object,
search_terms =  c("corona","covid19","Welzijn"),
type = c("all"),
use_parallel=TRUE
)
search_term
search_term
gsub(" ","|",search_term)
gsub("\ ","|",search_term)
gsub("/ ","|",search_term)
search_term
search_term <- gsub(" ","\|",search_term)
search_term <- gsub(" ","\\\|",search_term)
search_term <- gsub(" ","\\|",search_term)
search_term
search_term <- gsub(" ","a",search_term)
search_term
unlist(search_term)
toString(search_term)
gsub(",","|",toString(search_term))
gsub(", ","|",toString(search_term))
raw_text %>%
filter(stringr::str_detect(sprekertekst, gsub(", ","|",toString(search_term)) ))
search_terms <- function(procedure_object,search_terms,type="all",use_parallel=FALSE ){
if( all(!c("id_plenaire_sessie","journaallijn_id","type_activiteit","item_id") %in% names(procedure_object)) ){
stop("Not a valid procedure object!")
}
if(any(!type %in% c("all", "debatten","gedachtenwisselingen","vragen_interpelaties","parlementaire_initiatieven" ) ) ){
stop("Not a valid type. Valid options are: all, debatten, gedachtenwisselingen, vragen_interpelaties, parlementaire_initiatieven. Selecting multiple types is possible." )
}
if(!"all" %in% type){
procedure_object %>%
filter(type_activiteit %in% !!type) -> selection
}else{
selection <- procedure_object
}
mainlist <- call_api_multiple_times(iterator=selection$journaallijn_id,
URL = "http://ws.vlpar.be/e/opendata/",
path = "jln",
query =  list(),
resultVector = c("spreker"),
use_parallel=use_parallel)
message(green("✓ Size of text object = ", format(object.size(mainlist), units = "MB", digits = 1L)))
mainlist %>%
map_dfr(~ .x %>% as_tibble(), .id = "journaallijn_id") %>%
select(journaallijn_id,sprekertekst,sprekertitel) -> raw_text
message(green("✓ Scrubbing away all html-tags "))
raw_text %>%
mutate(sprekertekst = gsub("\r", "", sprekertekst)) %>%
mutate(sprekertekst = gsub("\n", "", sprekertekst)) -> raw_text
for(i in seq_along(raw_text$sprekertekst)){
raw_text$sprekertekst[[i]] <- xml_text(read_html(charToRaw(raw_text$sprekertekst[[i]])))
}
raw_text %>%
filter(stringr::str_detect(sprekertekst, gsub(", ","|",toString(search_term)) )) -> result
}#end of function
search_terms(procedure_object = procedure_object,
search_terms =  c("corona","covid19","Welzijn"),
type = c("all"),
use_parallel=TRUE
)
search_terms <- function(procedure_object,search_terms,type="all",use_parallel=FALSE ){
if( all(!c("id_plenaire_sessie","journaallijn_id","type_activiteit","item_id") %in% names(procedure_object)) ){
stop("Not a valid procedure object!")
}
if(any(!type %in% c("all", "debatten","gedachtenwisselingen","vragen_interpelaties","parlementaire_initiatieven" ) ) ){
stop("Not a valid type. Valid options are: all, debatten, gedachtenwisselingen, vragen_interpelaties, parlementaire_initiatieven. Selecting multiple types is possible." )
}
if(!"all" %in% type){
procedure_object %>%
filter(type_activiteit %in% !!type) -> selection
}else{
selection <- procedure_object
}
mainlist <- call_api_multiple_times(iterator=selection$journaallijn_id,
URL = "http://ws.vlpar.be/e/opendata/",
path = "jln",
query =  list(),
resultVector = c("spreker"),
use_parallel=use_parallel)
message(green("✓ Size of text object = ", format(object.size(mainlist), units = "MB", digits = 1L)))
mainlist %>%
map_dfr(~ .x %>% as_tibble(), .id = "journaallijn_id") %>%
select(journaallijn_id,sprekertekst,sprekertitel) -> raw_text
message(green("✓ Scrubbing away all html-tags "))
raw_text %>%
mutate(sprekertekst = gsub("\r", "", sprekertekst)) %>%
mutate(sprekertekst = gsub("\n", "", sprekertekst)) -> raw_text
for(i in seq_along(raw_text$sprekertekst)){
raw_text$sprekertekst[[i]] <- xml_text(read_html(charToRaw(raw_text$sprekertekst[[i]])))
}
raw_text %>%
filter(stringr::str_detect(sprekertekst, gsub(", ","|",toString(search_term)) )) -> result
return(result)
}#end of function
result <-  search_terms(procedure_object = procedure_object,
search_terms =  c("corona","covid19","Welzijn"),
type = c("all"),
use_parallel=TRUE
)
result
procedure_object
View(result)
1489382
raw_text
View(1489382)
View(raw_tekst)
View(raw_text)
type ="all"
mainlist <- call_api_multiple_times(iterator=selection$journaallijn_id,
URL = "http://ws.vlpar.be/e/opendata/",
path = "jln",
query =  list(),
resultVector = c("spreker"),
use_parallel=use_parallel)
mainlist %>%
map_dfr(~ .x %>% as_tibble(), .id = "journaallijn_id") %>%
select(journaallijn_id,sprekertekst,sprekertitel) -> raw_text
View(raw_text)
procedure_object = procedure_object
if(!"all" %in% type){
procedure_object %>%
filter(type_activiteit %in% !!type) -> selection
}else{
selection <- procedure_object
}
selection
mainlist <- call_api_multiple_times(iterator=selection$journaallijn_id,
URL = "http://ws.vlpar.be/e/opendata/",
path = "jln",
query =  list(),
resultVector = c("spreker"),
use_parallel=use_parallel)
mainlist %>%
map_dfr(~ .x %>% as_tibble(), .id = "journaallijn_id") %>%
select(journaallijn_id,sprekertekst,sprekertitel) -> raw_text
View(raw_text)
mainlist %>%
map_dfr(~ .x %>% as_tibble(), .id = "journaallijn_id") %>%
select(journaallijn_id,sprekertekst,sprekertitel) -> raw_text
1489382
View(mainlist)
selection$journaallijn_id
unqiue(selection$journaallijn_id)
unique(selection$journaallijn_id)
search_terms <- function(procedure_object,search_terms,type="all",use_parallel=FALSE ){
if( all(!c("id_plenaire_sessie","journaallijn_id","type_activiteit","item_id") %in% names(procedure_object)) ){
stop("Not a valid procedure object!")
}
if(any(!type %in% c("all", "debatten","gedachtenwisselingen","vragen_interpelaties","parlementaire_initiatieven" ) ) ){
stop("Not a valid type. Valid options are: all, debatten, gedachtenwisselingen, vragen_interpelaties, parlementaire_initiatieven. Selecting multiple types is possible." )
}
if(!"all" %in% type){
procedure_object %>%
filter(type_activiteit %in% !!type) -> selection
}else{
selection <- procedure_object
}
mainlist <- call_api_multiple_times(iterator=unique(selection$journaallijn_id),
URL = "http://ws.vlpar.be/e/opendata/",
path = "jln",
query =  list(),
resultVector = c("spreker"),
use_parallel=use_parallel)
message(green("✓ Size of text object = ", format(object.size(mainlist), units = "MB", digits = 1L)))
mainlist %>%
map_dfr(~ .x %>% as_tibble(), .id = "journaallijn_id") %>%
select(journaallijn_id,sprekertekst,sprekertitel) -> raw_text
message(green("✓ Scrubbing away all html-tags "))
raw_text %>%
mutate(sprekertekst = gsub("\r", "", sprekertekst)) %>%
mutate(sprekertekst = gsub("\n", "", sprekertekst)) -> raw_text
for(i in seq_along(raw_text$sprekertekst)){
raw_text$sprekertekst[[i]] <- xml_text(read_html(charToRaw(raw_text$sprekertekst[[i]])))
}
raw_text %>%
filter(stringr::str_detect(sprekertekst, gsub(", ","|",toString(search_term)) )) -> result
return(result)
}#end of function
result <-  search_terms(procedure_object = procedure_object,
search_terms =  c("corona","covid19","Welzijn"),
type = c("all"),
use_parallel=TRUE
)
View(result)
search_procedure(date_range_from = "2021-01-01"
,date_range_to= "2021-03-31"
,use_parallel=TRUE) %>%
search_terms(search_terms =  c("corona","covid19","Welzijn"),
type = c("all"),
use_parallel=TRUE) -> result
result
rm(result)
search_procedure(date_range_from = "2021-01-01"
,date_range_to= "2021-12-31"
,use_parallel=TRUE) %>%
search_terms(search_terms =  c("covid"),
type = c("all"),
use_parallel=TRUE) -> result
View(result)
search_procedure(date_range_from = "2000-01-01"
,date_range_to= "2021-12-31"
,use_parallel=TRUE) %>%
search_terms(search_terms =  c("covid"),
type = c("all"),
use_parallel=TRUE) -> result
search_procedure(date_range_from = "2011-01-01"
,date_range_to= "2021-12-31"
,use_parallel=TRUE) %>%
search_terms(search_terms =  c("covid"),
type = c("all"),
use_parallel=TRUE) -> result
?search_plenary
?search_plenary
devtools::load_all()
?search_plenary
devtools::document()
?search_procedure
?search_terms
devtools::document()
365*100
devtools::check()
devtools::load_all()
object <- search_plenary("2021-05-01","2021-10-01",use_parallel=FALSE)
View(object)
object <- search_plenary("2021-05-01","2021-10-01",use_parallel=TRUE)
object %>%
search_terms("Oosterweel",type="all",use_parallel=TRUE)
search_terms(object,"Oosterweel",type="all",use_parallel=TRUE)
object %>%
search_terms(procedure_object=object,"Oosterweel",type="all",use_parallel=TRUE)
devtools::load_all()
object %>%
search_terms("Oosterweel",type="all",use_parallel=TRUE)
devtools::load_all()
object %>%
search_terms("Oosterweel",type="all",use_parallel=TRUE)
devtools::load_all()
object %>%
search_terms("Oosterweel",type="all",use_parallel=TRUE)
devtools::load_all()
object %>%
search_terms(search_term="Oosterweel",type="all",use_parallel=TRUE)
install_github("datamarinier/vlaplr")
devtools::install_github("datamarinier/vlaplr")
libray(vlaplr)
plenary_object <- object
search_terms <- "Oosterweel"
type=="all"
type="all"
use_paralell =TRUE
if(!"all" %in% type){
plenary_object %>%
dplyr::filter(type_activiteit %in% !!type) -> selection
}else{
selection <- plenary_object
}
mainlist <- call_api_multiple_times(iterator=unique(selection$journaallijn_id),
URL = "http://ws.vlpar.be/e/opendata/",
path = "jln",
query =  list(),
resultVector = c("spreker"),
use_parallel=use_parallel)
use_paralell = TRUE
mainlist <- call_api_multiple_times(iterator=unique(selection$journaallijn_id),
URL = "http://ws.vlpar.be/e/opendata/",
path = "jln",
query =  list(),
resultVector = c("spreker"),
use_parallel=use_parallel)
use_parallel = TRUE
use_parallel
mainlist <- call_api_multiple_times(iterator=unique(selection$journaallijn_id),
URL = "http://ws.vlpar.be/e/opendata/",
path = "jln",
query =  list(),
resultVector = c("spreker"),
use_parallel=use_parallel)
mainlist %>%
purrr::map_dfr(~ .x %>% tibble::as_tibble(), .id = "journaallijn_id")
mainlist %>%
purrr::map_dfr(~ .x %>% tibble::as_tibble(), .id = "journaallijn_id") %>%
dplyr::select(journaallijn_id,sprekertekst,sprekertitel)
mainlist %>%
purrr::map_dfr(~ .x %>% tibble::as_tibble(), .id = "journaallijn_id") %>%
dplyr::select(journaallijn_id,sprekertekst,sprekertitel) -> raw_text
raw_text %>%
dplyr::mutate(sprekertekst = gsub("\r", "", sprekertekst)) %>%
dplyr::mutate(sprekertekst = gsub("\n", "", sprekertekst))
raw_text %>%
dplyr::mutate(sprekertekst = gsub("\r", "", sprekertekst)) %>%
dplyr::mutate(sprekertekst = gsub("\n", "", sprekertekst)) -> raw_text
raw_text$sprekertekst
for(i in seq_along(raw_text$sprekertekst)){
raw_text$sprekertekst[[i]] <- xml2::xml_text(xml2::read_html(charToRaw(raw_text$sprekertekst[[i]])))
}
raw_text %>%
filter(stringr::str_detect(sprekertekst, gsub(", ","|",toString(search_terms)) )) -> result
names(raw_text)
object <- search_plenary("2021-05-01","2021-10-01",use_parallel=TRUE)
devtools::load_all()
object <- search_plenary("2021-05-01","2021-10-01",use_parallel=TRUE)
search_term="Oosterweel"
type="all"
use_parallel=TRUE
plenary_object = object
if(!"all" %in% type){
plenary_object %>%
dplyr::filter(type_activiteit %in% !!type) -> selection
}else{
selection <- plenary_object
}
mainlist <- call_api_multiple_times(iterator=unique(selection$journaallijn_id),
URL = "http://ws.vlpar.be/e/opendata/",
path = "jln",
query =  list(),
resultVector = c("spreker"),
use_parallel=use_parallel)
message(crayon::green(cli::symbol$tick,"Size of text object = ", format(object.size(mainlist), units = "MB", digits = 1L)))
mainlist %>%
purrr::map_dfr(~ .x %>% tibble::as_tibble(), .id = "journaallijn_id") %>%
dplyr::select(journaallijn_id,sprekertekst,sprekertitel) -> raw_text
message(crayon::green(cli::symbol$tick,"Scrubbing away all html-tags "))
raw_text %>%
dplyr::mutate(sprekertekst = gsub("\r", "", sprekertekst)) %>%
dplyr::mutate(sprekertekst = gsub("\n", "", sprekertekst)) -> raw_text
for(i in seq_along(raw_text$sprekertekst)){
raw_text$sprekertekst[[i]] <- xml2::xml_text(xml2::read_html(charToRaw(raw_text$sprekertekst[[i]])))
}
names(raw_text)
raw_text %>%
filter(stringr::str_detect(sprekertekst, gsub(", ","|",toString(search_terms)) )) -> result
names(raw_text)
search_terms
raw_text %>%
filter(stringr::str_detect(sprekertekst, gsub(", ","|",toString(search_term)) )) -> result
names(raw_text)
raw_text %>% names
raw_text %>%
filter(stringr::str_detect(sprekertekst, gsub(", ","|",toString(search_term)) ))
?str_detect
raw_text %>%
select(sprekertekst)
raw_text %>%
dplyr::select(sprekertekst)
raw_text %>%
dplyr::rename(tekst=sprekertekst)%>%
filter(stringr::str_detect(tekst, gsub(", ","|",toString(search_term)) ))
search_term
gsub(", ","|",toString(search_term)) )
gsub(", ","|",toString(search_term))
str_detect(raw_text$sprekertekst, gsub(", ","|",toString(search_term)) )
stringr::str_detect(raw_text$sprekertekst, gsub(", ","|",toString(search_term)) )
?gsub
library(stringr)
raw_text %>%
filter(str_detect(sprekertekst, gsub(", ","|",toString(search_term)) ))
raw_text %>%
filter(sprekertekst==str_detect(sprekertekst, gsub(", ","|",toString(search_term)) ))
df %>%
filter(
str_detect(letters, "a|f|o")
)
df <- data.frame(numbers = 1:52, letters = letters)
df %>%
filter(
str_detect(letters, "a|f|o")
)
df
?toString
?
?str_detect
raw_text %>%
head(10)
raw_text %>%
head(10) %>%
filter(stringr::str_detect(sprekertekst, gsub(", ","|",toString(search_term)) ))
search_term
raw_text %>%
filter(stringr::str_detect(sprekertekst, gsub(", ","|",toString(search_term)) )) -> result
data.frame(sprekertekst = c("Oosterweel","A","B"))
data.frame(sprekertekst = c("Oosterweel","A","B")) %>%
filter(stringr::str_detect(sprekertekst, gsub(", ","|",toString(search_term)) ))
data.frame(sprekertekst = c("Oosterweel","A","B")) %>%
as_tibble %>%
filter(stringr::str_detect(sprekertekst, gsub(", ","|",toString(search_term)) ))
data.frame(sprekertekst = c("Oosterweel","A","B")) %>%
tibble %>%
filter(stringr::str_detect(sprekertekst, gsub(", ","|",toString(search_term)) ))
data.frame(sprekertekst = c("Oosterweel","A","B")) %>%
tibble::tibble %>%
filter(stringr::str_detect(sprekertekst, gsub(", ","|",toString(search_term)) ))
data.frame(sprekertekst = c("Oosterweel","A","B")) %>%
as_tibble::tibble %>%
filter(stringr::str_detect(sprekertekst, gsub(", ","|",toString(search_term)) ))
data.frame(sprekertekst = c("Oosterweel","A","B")) %>%
tibble::as_tibble %>%
filter(stringr::str_detect(sprekertekst, gsub(", ","|",toString(search_term)) ))
data.frame(sprekertekst = c("Oosterweel","A","B")) %>%
tibble::tibble %>%
filter(stringr::str_detect(sprekertekst, gsub(", ","|",toString(search_term)) ))
data.frame(sprekertekst = c("Oosterweel","A","B")) %>%
as_tibble
data.frame(sprekertekst = c("Oosterweel","A","B")) %>%
tibble::as_tibble
tibble::as_tibble(data.frame(sprekertekst = c("Oosterweel","A","B"))) %>%
filter(stringr::str_detect(sprekertekst, gsub(", ","|",toString(search_term)) ))
library(dplyr)
tibble::as_tibble(data.frame(sprekertekst = c("Oosterweel","A","B")))
tibble::as_tibble(data.frame(sprekertekst = c("Oosterweel","A","B"))) %>%
filter(stringr::str_detect(sprekertekst, gsub(", ","|",toString(search_term)) ))
raw_text %>%
head(10) %>%
filter(stringr::str_detect(sprekertekst, gsub(", ","|",toString(search_term)) ))
raw_text %>%
dplyr::filter(stringr::str_detect(sprekertekst, gsub(", ","|",toString(search_term)) ))
devtools::load_all()
object %>%
search_terms(search_term="Oosterweel",type="all",use_parallel=TRUE)
